\documentclass[a4paper]{article}
\usepackage{a4wide}
\usepackage[utf8]{inputenc}
\usepackage{lastpage}
\usepackage{fancyhdr}
\usepackage[section]{placeins}
\usepackage{hyperref}
\pagestyle{fancy}
\cfoot{\thepage\ of \pageref{LastPage}}

\title{Label free quantification (LFQ) analysis: \\ QC analysis for sample preparation and LC-MS}
\author{Functional Genomics Center Zuerich}
\begin{document}
\SweaveOpts{concordance=TRUE}


<<echo=FALSE, result=HIDE>>=
library(lattice)
library(xtable)
source("QprotMatrixFunctions_rn_V2.R")
@
\maketitle


\section{Workflow Overview}

The general FGCZ LFQ workflow is described in Figure \ref{fig:workflowOverview}. Briefly:
proteins are precipitated using cold acetone, digested with trypsin and analysed via LC-MS/MS using high-end MS systems (e.g. Q-Exactive). The acquired raw files are processed using MaxQuant. The resulting text files are parsed and further processed to extract critical information on sample preparation and LC-MS performances (e.g. number of missed cleavages, correlation plots, protein identifications, quantitative values, ...).

\begin{figure}[!htb]
  \centerline{\includegraphics[width=0.8\textwidth]{LFQ_QC_workflow.pdf}}
  \caption{Shown is an Overview over the workflow how the following results are generated}
  \label{fig:workflowOverview}
\end{figure}


\pagebreak

\section{Summary Overview}
\vspace{0.5cm}
Based on some hard criterias, we evaluate if the quality control step (QC one) is passed or not. 
Imporant criterias are outlined below along with a reference to the figure later in the report and a flag if it needs to be evaluated in more depth or not. The criterias are sorted according to their relevancy.
\vspace{1cm}
<<echo=FALSE, results=hide>>=
#BUILD UP SUMMARY TABLE WITH STATIC INFORMATION
# colorColumnIf <- function(x,y){
#   ifelse(x!=3,
#          paste("\\textcolor{green}{", formatC(x, dig=2, format="f"), "}"),
#          paste("\\textcolor{red}{", formatC(x, dig=2, format="f"), "}"))
# }
myTable <- matrix(,nrow=0, ncol = 5)
header <- c("Criteria", "Reference","Threshold", "Value", "Flag")
colnames(myTable) <- header
diffExpGenes <- c("Max % of regulated proteins (1): ","n/a", "5%", "NA", "NA")
minRsquare <- c("Min R-square for correlation: ","Fig. 15", "0.9", "NA", "NA")
maxScaleFactor <- c("Max scaling factor: ","Fig. 14", "3", "NA", "NA")
varianceMSMS <- c("Difference of identified peptides in biochemical reps: ","Table 2", "30%", "NA", "NA")
percSingleProteinHits <- c("Max % of single hit proteins (in full exp) (2): ","n/a", "50%", "NA", "NA")
percSingleProteinHitsInQuant <- c("% of single hit proteins in LFQ (2): ","n/a", "0%", "NA", "NA")
missedCleavage <- c("Min % of fully tryptic: ","Fig. 7", "50%", "NA", "NA")
unmodifiedPerc <- c("Min % of unmodified peptides: ","Fig. 8", "80%", "NA", "NA")

myTable <- rbind(myTable, diffExpGenes, minRsquare, maxScaleFactor, missedCleavage, unmodifiedPerc, varianceMSMS, percSingleProteinHits, percSingleProteinHitsInQuant)

overall_minimumOKs <- 5

#FillDefault Thresholds
fixDiffExpTreshold <- 5
minRsquare <- 0.9
minScaleFactor <- 3
minVarOfID <- 30
minSingleProteinHits <- 30
minQuantSingleProteinHits <- 0
minMissedCleaveage <- 50
minUnmodPeptides <- 80


myTable[1,3] <- paste(fixDiffExpTreshold,"%",sep="")
myTable[2,3] <- minRsquare
myTable[3,3] <- minScaleFactor
myTable[4,3] <- paste(minMissedCleaveage,"%",sep="")
myTable[5,3] <- paste(minUnmodPeptides,"%",sep="")
myTable[6,3] <- paste(minVarOfID,"%",sep="")
myTable[7,3] <- paste(minSingleProteinHits,"%",sep="")
myTable[8,3] <- paste(minQuantSingleProteinHits,"%",sep="")

#Parse and run for Values
#Differentially Expressed Genes < 0.05
FCth <- 1.5
sigThr <- 0.05

msmsName<- "maxquant/msms.txt"
msms_d <- read.table(msmsName, header=T, sep="\t")

ff <- "maxquant/summary.txt"
summ <- read.table(ff, header=F, sep="\t")
f <- "maxquant/evidence.txt"
evi_d <- read.table(f, header=T, sep="\t")

f <- "maxquant/proteinGroups.txt"
Fulldat <- read.table(f, header=T, sep="\t")
bool_moreThanOnePeptide <- Fulldat$Razor...unique.peptides > 1
f <- "proteinGroups_FGCZ2grp_Intensity.txt"
dat <- read.table(f, header=T, sep="\t",row.names=1)
quantDat <- dat[bool_moreThanOnePeptide,]
i_dat <- ImputeValuesInProtMatrixForRowsWithZeros(quantDat)
n_i_dat <- NormalizeWithMedianPQMatrix(i_dat)
sf <- "appliedScaleFactors_Median.txt"
scaleF <- read.table(sf, sep=" ", header=F)
mat <- n_i_dat
list <- Do2grpTtestRobustOnMatrixAndBHcorrWithThresholdAndFoldChangeAndReturnOnlySignificantsInternalTrafo(ProtQuantMatrix=mat,SignificanceThreshold=sigThr, LinFoldChangeThreshold=FCth, bool_TrafoHere=TRUE)
percDiffExp <- round(100*nrow(list)/nrow(n_i_dat),2)
myTable[1,4] <- percDiffExp
if(percDiffExp > fixDiffExpTreshold) OkOrNot <- "NOT OK" else OkOrNot <- "OK"
myTable[1,5] <- OkOrNot

#min R-Square
ProtcorrMatrix <- cor(as.matrix(n_i_dat))
rsqMin <- min(ProtcorrMatrix)
myTable[2,4] <- paste(round(rsqMin,4),sep="")
if(rsqMin > minRsquare) OkOrNot <- "OK" else OkOrNot <- "NOT OK"
myTable[2,5] <- OkOrNot

#ScalingFactor
mxScF <- max(scaleF[,2])
myTable[3,4] <- round(mxScF,2)
if(mxScF > minScaleFactor) OkOrNot <- "NOT OK" else OkOrNot <- "OK"
myTable[3,5] <- OkOrNot


#maxVar of Identifed sequences
NumRows <- nrow(summ)/2
mqPeptideSequencesIdentified <- summ[2:NumRows,32]
percDiffOfPepSeqsID <- 100 - round(100*min(as.numeric(as.character(mqPeptideSequencesIdentified)))/max(as.numeric(as.character(mqPeptideSequencesIdentified))),2)
myTable[6,4] <-  paste(percDiffOfPepSeqsID,"%",sep="")
if(percDiffOfPepSeqsID > minVarOfID) OkOrNot <- "NOT OK" else OkOrNot <- "OK"
myTable[6,5] <- OkOrNot



#max % on singleHitProteins
totProteins <- nrow(Fulldat)
min2peps <- sum(Fulldat$Razor...unique.peptides > 1)
percMin2Peps <- 100*(totProteins - min2peps)/totProteins
myTable[7,4] <- paste(round(percMin2Peps,2),"%",sep="")
if(percMin2Peps < minSingleProteinHits) OkOrNot <- "OK" else OkOrNot <- "Problematic"
myTable[7,5] <- OkOrNot


#max % on QUANT:singleHitProteins
totQuantProteins <- nrow(quantDat)
totSingleHitQuant <- sum(Fulldat[bool_moreThanOnePeptide,]$Razor...unique.peptides == 1)
percQuantSingleHits <- round(100*totSingleHitQuant/totQuantProteins, 2)
myTable[8,4] <- paste(percQuantSingleHits,"%",sep="")
if(percQuantSingleHits == minQuantSingleProteinHits) OkOrNot <- "OK" else OkOrNot <- "NOT OK"
myTable[8,5] <- OkOrNot

#max % on missed cleaves
#minMissedCleaveage <- 50
#myTable[6,3] <- paste(minMissedCleaveage,"%",sep="")

mctable <- table(msms_d$Missed.cleavages,msms_d$Raw.file)

assignedPepsPerRaw <- vector()
for (i in 1:ncol(mctable)) {
  assignedPepsPerRaw[i] <- sum(mctable[,i])
} 
assignedZeroMCperRaw <- mctable[1,]
percMCZero <- round(100*assignedZeroMCperRaw/assignedPepsPerRaw,2)
minPercMCZero <- min(percMCZero)
myTable[4,4] <- paste(round(minPercMCZero,2),"%",sep="")
if(minPercMCZero > minMissedCleaveage) OkOrNot <- "OK" else OkOrNot <- "NOT OK"
myTable[4,5] <- OkOrNot

#max % on var mods
#histogram(~ msms_d$Modifications|msms_d$Raw.file, main="VarMods per RawFile",  scales = list(x = list(rot = 90, cex=0.8)), par.strip.text = list(cex = 0.4), xlab="Variable modifications")
varModTable <- table(msms_d$Modifications, msms_d$Raw.file)
#CRITICAL:: if one changes varMods for searching.. eventually "unmodified" is not last element anymore (alphabetically order, therefore pretty unlikely.. there is only V,W,X,Y,Z left )
unmodifiedRow <- nrow(varModTable)
unmodifiedPerRawFile <- varModTable[unmodifiedRow,]
assignmentsPerRawFile <- vector()
for (i in 1:ncol(varModTable)) {
  assignmentsPerRawFile[i] <- sum(varModTable[,i])
} 
percUnmodifiedPerRawFile <- round(100*unmodifiedPerRawFile/assignmentsPerRawFile,2)
myTable[5,4] <- paste(min(percUnmodifiedPerRawFile),"%",sep="")
if(min(percUnmodifiedPerRawFile) > minUnmodPeptides) OkOrNot <- "OK" else OkOrNot <- "NOT OK"
myTable[5,5] <- OkOrNot

#Baustelle figure out which one is the OK -> build it up different
# jonas (20150601): solved by looking how many TRUE FALSE (at least one TRUE) # crashes if NOT a single OK -> also this is fixed (with quite a hack)
#Table contains 40 cells.. check which ones are OK but then look for FALSE <= 35
acceptableNotOKsInTable <- 40 - overall_minimumOKs
if (table(myTable=="OK")[1] <= acceptableNotOKsInTable) QC_yn <- "QC passed" else QC_yn <- "QC failed"
@


<<echo=FALSE, results=tex>>=
#myTable[,2] <- colorColumnIf(myTable[,2],3)
#print(xtable(myTable, caption="Quality Control Summary", sanitize.text.function = function(x){x}), include.rownames=FALSE)
print(xtable(myTable, caption="Quality Control Summary, (1) Fold change threshold: 1.5, pValue threshold: 0.05 this is the percentage of false positives, as this is a QC analysis which consists of biochemical replicas where we do not expect to see real changes. (2) single hit proteins are proteins identified with only one peptide. This percentage can vary quite a bit and is very much sample dependent. Since we are going to quantify proteins with at least 2 peptides this shows the percentage one may loose for quantitation."), include.rownames=FALSE)
@
\vspace{1cm}
The QC result is the following:

\vspace{1cm}
\begin{center}
{\LARGE  \textbf{\Sexpr{QC_yn}}}
\end{center}
\pagebreak



\section{Data Input and Output Overview}
The following outputs are provided:\\
\\
i). pdf file reporting the results of the QC analysis\\
ii). zip folder with the results of the MaxQuant workflow\\
iii). Scaffold file (within the zip-file), \\
\\
Scaffold is a useful software for the visualization of the protein and peptide identification results. 
The free scaffold viewer can be downloaded from the internet.\\
\href{url}{http://www.proteomesoftware.com/products/free-viewer/}
\\
\\


\subsection{Input: Samples analysed}
Here the list of acquired raw-files:
<<echo=FALSE, results=tex>>=
library(xtable)
f <- "maxquant/summary.txt"
dat <- read.table(f, header=T, sep="\t")
NumFiles <- (nrow(summ))/2
files <- summ[2:NumFiles,1]
print(xtable(as.matrix(files), caption="measured files"), size="\\normalsize", include.colnames=FALSE)
@


\pagebreak

\subsection{Parameters}


The protein identification and QC quantification was performed using MaxQuant. 
Below are reported information about the MaxQuant version, the variable modifications taken into consideration, the database used and the targeted False Discovery Rate (FDR) at the spectrum (psm) and protein level. For the complete list of parameters please check the attached parameters txt file.\\


<<echo=FALSE>>=
#ParametersFile
f <- "maxquant/parameters.txt"
params <- read.table(f, header=T, sep="\t")

#write out:
mqVersion <- paste(" ",params[1,2] ,sep="")
decoyMode <- params[3,2]
psmFDR <- params[18,2]
protFDR <- params[19,2]
varMods <- params[31,2]
fasta <- params[45,2]
enz <- unique(summ[1,4])
enzSpez <- unique(summ[1,5])
@

\begin{verbatim}
Maxquant version:  \Sexpr{mqVersion}

Fasta database:  \Sexpr{fasta}
Decoy mode:  \Sexpr{decoyMode}
Enzyme:  \Sexpr{enz}
Enzyme specificity:  \Sexpr{enzSpez}

Protein FDR:  \Sexpr{protFDR}
PSM FDR:  \Sexpr{psmFDR}

Variable modifications:  \Sexpr{varMods}
\end{verbatim}




\subsection{Overview of the data quality}
Information on the LC MS/MS data acquired for each sample:\\
- number of MS scans;\\
- number MS/MS scans;\\
- number of peptide sequences identified\\
\\

Data are extracted from file "Summary.txt"

<<echo=FALSE>>=
NumRows <- nrow(summ)/2
tt <- cbind(as.character(summ[1:NumRows,1]),as.character(summ[1:NumRows,17]),as.character(summ[1:NumRows,19]),as.character(summ[1:NumRows,24]),as.character(summ[1:NumRows,32]))

header <- tt[1,]
topTable <- as.table(tt[-1,])
colnames(topTable) <- header
@

Look at numbers:
<<echo=FALSE, results=tex>>=
print(xtable(topTable, caption="Overview on the hard numbers for each file."), size="\\small")

@
\pagebreak

\subsection{Protein identifications overview}
Next an overview about the number of proteinGroups is shown. We present here more information about the sequence coverage and how many peptides are identified.


<<echo=FALSE>>=
#ProteinGroups
f <- "maxquant/proteinGroups.txt"
originalProteinGroups <- read.table(f, header=T, sep="\t")
#dat <- read.table(f, header=T, sep="\t")


ff <- "maxquant/peptides.txt"
pepts <- read.table(ff, header=T, sep="\t")
NumPep <- nrow(pepts)
#total number of proteins
N <- nrow(originalProteinGroups)
bool_OneHitWonder <- originalProteinGroups$Razor...unique.peptides==1
bool_min2 <- originalProteinGroups$Razor...unique.peptides>1
bool_min3 <- originalProteinGroups$Razor...unique.peptides>2
ProtMin2 <- sum(bool_min2)
ProtMin3 <- sum(bool_min3)
averagePepPerProt <- round(mean(originalProteinGroups$Razor...unique.peptides),2)
medianPepPerProt <- median(originalProteinGroups$Razor...unique.peptides)
OneHitWonders <- sum(bool_OneHitWonder)
@

\begin{verbatim}
Total number of identified proteins:  \Sexpr{N}
Total number of protein only one single peptide:  \Sexpr{OneHitWonders}
Total number of protein with at least 2 peptides:  \Sexpr{ProtMin2}
Total number of protein with at least 3 peptides:  \Sexpr{ProtMin3}

Average number of peptides per protein:  \Sexpr{averagePepPerProt}
Median number of peptides per protein:  \Sexpr{medianPepPerProt}

Total number of unique identified pepitdes:  \Sexpr{NumPep}
\end{verbatim}

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE>>=
#MW
par(mfrow=c(2,1))
hist(originalProteinGroups$Mol..weight..kDa., breaks=200,col="green", freq=TRUE, main="Molecular Weight distribution (kDa, linear scale)",xlab = "Molecular Weight (kDa)", ylab="Counts")
hist(log(originalProteinGroups$Mol..weight..kDa.,10), breaks=20,col="green", freq=TRUE, main="Molecular Weight distribution (kDa, log10 scale)", xlab="log scaled MW[kDa]  :: 1=10kDa   1.5=31.6kDa    2=100kDa", ylab="Counts")
@
  \caption{Distribution of Molecular Weights for proteins identfied (lower panel is on log10 scale)}
  \label{fig:MW}
\end{figure}



\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE, width=6, height=6>>=
#Coverage
hist(originalProteinGroups$Sequence.coverage.... , breaks=40, freq=TRUE, main="Protein Sequence Coverage", col="grey", xlab="Percentage of Sequence Coverage", ylab="Counts in bin")
@
  \caption{Distribution of sequence coverage for all identified proteins}
  \label{fig:SeqCov}
\end{figure}


\pagebreak


\subsection{More Information about Identified Peptide Sequences}
In the Maxquant output (evidence.txt) file there are informations for all identified peptides in the full experiment. In the Maxquant output (msms.txt) file there are informations for each and every identfied msms scan. We try here to show if all the files have been equally treated (e.g. same digestion efficiency, variable modifications..) \\
\vspace{2cm}
Here it shows the distribution of picked and fragmented precursor masses for the different raw-files.

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE,width=8, height=6>>=
histogram(~ evi_d$m.z|evi_d$Raw.file, par.strip.text = list(cex = 0.4), xlab="precursors (m/z)")
@
  \caption{Distribution of the precursor m/z of the identified peptides}
  \label{fig:mzID}
\end{figure}

\begin{figure}
<<echo=FALSE,fig=TRUE,width=8, height=6>>=
histogram(~ evi_d$Mass.Error..ppm. |evi_d$Raw.file, nbins=50, main="Distribution of recalibrated mass error (ppm)", par.strip.text = list(cex = 0.4), xlab="Recalibrated mass error (ppm)")
@
  \caption{Distribution of recalibrated mass error (ppm) of precursors. Recalibration is a feature of MaxQuant.}
  \label{fig:ppmErrorCali}
\end{figure}

\pagebreak




<<echo=FALSE>>=
N <- length(table(msms_d$Raw.file))
@

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE,width=8, height=6>>=
#Length Distribution over identified peptides (split on RAWfile)
histogram(~ msms_d$Length|msms_d$Raw.file, main="Length Distribution of identified peptides", par.strip.text = list(cex = 0.4), xlab="Peptide Length")
@
  \caption{Overview of the peptide length for identified peptides (with respect to number of amino acids)}
  \label{fig:Length}
\end{figure}

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE,width=8, height=6>>=
#Missed cleavage
N <- length(table(msms_d$Raw.file))
histogram(~ msms_d$Missed.cleavages|msms_d$Raw.file,main="Distribution of missed cleavages", par.strip.text = list(cex = 0.4), xlab="Number of missed cleavages")
@
  \caption{Overview for missed-cleavages for identified peptides (split on raw-file level)}
  \label{fig:mmc}
\end{figure}

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE, width=8, height=15>>=
#VarMods
N <- length(table(msms_d$Raw.file))
#modPeps <- cbind(as.character(msms_d$Raw.file), as.character(msms_d$Modifications))
#table(modPeps)
#histogram(~ msms_d$Modifications|msms_d$Raw.file, main="VarMods per RawFile", layout=c(1,N), scales = list(x = list(rot = 90)))
histogram(~ msms_d$Modifications|msms_d$Raw.file, main="VarMods per RawFile",  scales = list(x = list(rot = 90, cex=0.8)), par.strip.text = list(cex = 0.4), xlab="Variable modifications")
@
  \caption{Overview of identified modifications for identified peptides}
  \label{fig:Varmods}
\end{figure}

\begin{figure}[!htb]
<<echo=FALSE,fig=TRUE,width=8>>=
#Charge
histogram(~ msms_d$Charge|msms_d$Raw.file, main="Distribution of Charges for identified peptides", par.strip.text = list(cex = 0.4), xlab="Charge of identified peptides")
@
  \caption{Overview of charge states for identified peptides.}
  \label{fig:Charge}
\end{figure}




%
%
%    HERE TO INSERT THE iRT SECTION ON LC STABILTY
%
%

\vspace{5cm}
\pagebreak


\section{QC of Quantitative Values}
\vspace{0.5cm}
<<echo=FALSE>>=

#filter for more than 2 peptides to use in quantitation -> we have to go back to original proteinGroups
# extract the columns that have unique and razor more than 1
# apply this bool to the IntenstiyMAT


#f <- matrixFileName
f <- "proteinGroups_FGCZ2grp_Intensity.txt"
dat <- read.table(f, header=T, sep="\t",row.names=1)
#quantDat <- dat[bool_moreThanOnePeptide,]

QuantableProteins <- nrow(quantDat)

#write out:
totProteins <- nrow(dat)
msRuns <- ncol(dat)
grpSize <- ncol(dat)/2
dat_noZeros <- RemoveRowsWithZerosFromProtMatrix(dat)
matWoZeros <- nrow(dat_noZeros)
protsWithZeros <- totProteins - matWoZeros
protWihtOnlyOne <- totProteins - QuantableProteins
percQuant <- round((QuantableProteins*100)/totProteins,2)
@

\begin{verbatim}
The total number of proteins (MaxQuant, protFDR=5%) here is:  \Sexpr{totProteins}
--
Number of LC-MS/MS experiments included:  \Sexpr{msRuns}
Number of LC-MS/MS experiments in each group:  \Sexpr{grpSize}
--
Number of proteins with missing values:  \Sexpr{protsWithZeros}
Number of proteins without missing values: \Sexpr{matWoZeros}
Number of proteins with more than ONE peptide: \Sexpr{QuantableProteins}
Number of proteins with only one peptide: \Sexpr{protWihtOnlyOne}

\end{verbatim}

\vspace{1cm}
This quality control of quantitative values section should show in the following figures, how the quantitative values for all the samples are distributed, correlated, imputed and normalized. To show the reproducibility among the different protein extracts we do a correlation of all quantitative values (pairwise). The closer the correlation to ONE the better. 


The input matrix has the following structure.\\
\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE, width=6, height=5, results=hide>>=
#i_dat <- ImputeValuesInProtMatrixForRowsWithZeros(quantDat)
#n_i_dat <- NormalizeWithMedianPQMatrix(i_dat)

#image(asinh(t(dat)))
#axis(1,colnames(dat)[2], at = 2)
heatmap.2(asinh(as.matrix(quantDat)), dendrogram = "none", trace = "none", labRow="",margins=c(15,2), main="all MS experiments", ylab="proteins")
@
  \caption{Heatmap for quantifyable proteins (asinh transformed)}
  \label{fig:imagPlot}
\end{figure}




\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE, width=6, height=6>>=
samples <- names(dat)
colors <- rainbow(length(samples))
plotDensity(quantDat, col=colors, lwd=1, main="untreated SignalDistributions (no transformation)", xlab="(Quantvalue)")
legend("topright", samples, text.col=colors)
@
  \caption{Density plot for quantifyable proteins (not transformed)}
  \label{fig:densityAsinh}
\end{figure}


\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE,  width=6, height=6 >>=
plotDensity(asinh(i_dat), col=colors, lwd=1, main="SignalDistributions", xlab="asinh(Quantvalue)")
legend("topright", samples, text.col=colors)
@
  \caption{Density plot of the quant values with imputation in asinh transformation (not yet normalized)}
  \label{fig:i_dens}
\end{figure}

\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE,  width=6, height=6>>=
plotDensity(asinh(n_i_dat), col=colors, lwd=1, main="SignalDistributions", xlab="asinh(Quantvalue)")
legend("topright", samples, text.col=colors)
@
  \caption{Density plot for normalized values based on imputed matrix (asinh)}
  \label{fig:normDensityPlot}
\end{figure}

The scaling factors are visualized in Figure \ref{fig:ScaleFactors}. It shows with what factor the individually calcuated numbers are boosted for the normalization.

\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE, width=8, height=8>>=
#scaleF <- read.table(sf, sep=" ", header=F)
#sf <- "appliedScaleFactors_Median.txt"
par(mfrow=c(1,1))
par(mar=c(4,20,4,1))
barplot(scaleF$V2, horiz=TRUE, names.arg=scaleF$V1, cex.names = 1, las=1, main="Scaling Factors")
@
  \caption{Applied scaling factors for normalization (calculated using median normalization)}
  \label{fig:ScaleFactors}
\end{figure}





\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE, width=8, height=8>>=
DoCorrelationOnMatrix(asinh(n_i_dat))
@
  \caption{Correlation plot for normalized values based on imputed matrix (asinh)}
  \label{fig:normCorr}
\end{figure}




\begin{figure}[!htb]
<<echo=FALSE, fig=TRUE,  width=6, height=6>>=
mat <- n_i_dat
TotList <- Do2grpTtestOnMatrixAndBHcorrReturnAllInternalTrafo(ProtQuantMatrix=mat, bool_TrafoHere=TRUE)
hist(as.numeric(TotList[,2]), breaks=20, main="Histogram of pValues", xlab="Density of pValues")
@
  \caption{Histogram of pValues. For true biological differences between 2 groups, the histogram should not be a flat line but have a peak for small pValues}
  \label{fig:pVHist}
\end{figure}






\pagebreak

\section{Disclaimer and Acknowledgements}
This report is written by J. Grossmann using in Sweave-R and processes text files which are exported from MaxQuant.\\
\\
ALL INFORMATION, INTELLECTUAL PROPERTY RIGHTS, PRODUCTS AND / OR SERVICES ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, SUITABILITY AND / OR FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN PARTICULAR, THE FGCZ (Functional Genomics Center Zurich, or any of its employees) MAKES NO WARRANTIES OF ANY KIND REGARDING THE ACCURACY OF ANY DATA, SOFTWARE, SCRIPTS AND / OR DATABASE.
\\
\\
Deep thanks go to C. Panse, S. Barkow, C. Trachsel, P. Nanni, C. Fortes and W. Wolski who provided stimulating environment, discussions and/or a template for this QC report.

\end{document}